{"version":3,"sources":["components/Node.js","components/Grid.js","App.js","reportWebVitals.js","index.js"],"names":["Node","props","startFinishClass","node","colored","pointer","className","key","Grid","useState","nodes","setNodes","animating","setAnimating","inOrder","setInOrder","speed","setSpeed","ms","setMs","useEffect","row","curRow","col","curNode","push","numb","isPointer","insertionSort","arr","currentVal","curNum","count","i","length","filter","el","j","time","slice","x","setTimeout","selectionSort","swap","idx1","idx2","lowest","y","bubbleSort","noSwaps","temp","p1","p2","undefined","handleOptionChange","e","target","value","type","id","name","checked","onChange","htmlFor","map","disabled","onClick","sort","Math","random","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5030b8c3.chunk.js","sourcesContent":["import React from 'react';\nimport './styles/Node.css'\n\nconst Node = (props) => {\n    let startFinishClass = 'node';\n    if(props.node.colored && props.pointer){\n        startFinishClass = 'node pointer'\n    }else if(props.node.colored){\n        startFinishClass = 'node node-colored'\n    }\n\n    return(\n        <div className={startFinishClass} key={props.node.key}>\n            \n        </div>\n    );  \n}\n\nexport default Node;","import React, {useState, useEffect} from 'react';\nimport Node from './Node';\nimport './styles/Grid.css'\n\nconst Grid = () => {\n\n    const [nodes, setNodes] = useState([])\n    const [animating, setAnimating] = useState(false)\n    const [inOrder, setInOrder] = useState(true)\n    const [speed, setSpeed] = useState('medium')\n    const [ms, setMs] = useState(100)\n\n    useEffect(() => {\n        const nodes = [];\n        for(let row = 0; row < 25; row++){\n            const curRow = [];\n            for(let col = 0; col < 25; col++){\n                let curNode = {\n                    col, \n                    row,\n                    key: `id${row}${col}`,\n                    colored: col <= row ? true : false \n                };\n                curRow.push(curNode);\n            }\n        nodes.push({numb: curRow, \n                    key: `kr${row}`,\n                    isPointer: false\n                    })\n        }\n        setNodes(nodes)\n    }, [])\n\n\n    const animateBubblesort = () => {\n        bubbleSort(nodes);\n    }\n    const animateSelectionsort = () => {\n        selectionSort(nodes);\n    }\n    const animateInsertionsort = () => {\n        insertionSort(nodes);\n    }\n\n    const shuffle = () => {\n        let arr = nodes.slice(0);\n        arr.sort(() => Math.random() - 0.5);\n        setNodes(arr);\n        setInOrder(false)\n    }\n\n    const insertionSort = (arr) => {\n        var count = 0\n        var currentVal, curNum\n        for(var i = 1; i < arr.length; i++){\n            currentVal = arr[i];\n            curNum = arr[i].numb.filter(el => el.colored).length;\n            for(var j = i - 1; j >= 0 && arr[j].numb.filter(el => el.colored).length > curNum; j--) {\n                time(count,arr.slice(0), j+1, i)\n                count++\n                let x = arr[j+1]\n                arr[j+1] = arr[j] \n                arr[j] = x\n            }  \n            arr[j+1] = currentVal;\n            curNum = j+1\n            time(count,arr.slice(0), j+1, i)\n            count++\n        }\n        setTimeout(() => {\n            setAnimating(false)\n            setInOrder(true)\n        }, ms * count)\n    }\n\n\n\n    const selectionSort = (arr) => {\n        const swap = (arr, idx1, idx2) =>\n          ([arr[idx1], arr[idx2]] = [arr[idx2], arr[idx1]]);\n        let count = 0;\n      \n        for (var i = 0; i < arr.length; i++) {\n          let lowest = i;\n          for (var j = i + 1; j < arr.length; j++) {    \n            time(count,arr.slice(0),lowest, j)\n            count++\n            let x = arr[lowest].numb.filter(el => el.colored)\n            let y = arr[j].numb.filter(el => el.colored)\n            if (x.length > y.length) {\n              lowest = j;\n            }\n          }\n          if (i !== lowest) {\n              swap(arr, i, lowest);\n              time(count,arr.slice(0),lowest, j)\n              count++\n          }\n\n        }\n        setTimeout(() => {\n            setAnimating(false)\n            setInOrder(true)\n            setNodes(arr)\n        }, ms * count)\n    }\n\n    const bubbleSort = (arr) => {\n        var noSwaps;\n        var count = 0;\n        for(var i = arr.length; i > 0; i--){\n            noSwaps = true;\n                for(var j = 0; j < i - 1; j++){\n                    let x = arr[j].numb.filter(el => el.colored)\n                    let y = arr[j + 1].numb.filter(el => el.colored)\n                    if(x.length > y.length){\n                        var temp = arr[j];\n                        arr[j] = arr[j+1];\n                        arr[j+1] = temp;\n                        noSwaps = false;\n                        time(count,arr.slice(0),j,j+1)\n                        count++  \n                    }else{\n                        time(count,arr.slice(0),j,j+1)\n                        count++ \n                    }\n                }\n            if(noSwaps){\n                time(count,arr.slice(0),j,j+1)\n                break\n            };\n        }\n        setTimeout(() => {\n            setAnimating(false)\n            setInOrder(true)\n        }, ms * count)\n\n    }\n    const time = (count, arr,p1,p2) => {\n        setTimeout(() => {\n            if(arr[p1] !== undefined && arr[p2] !== undefined){\n            arr[p1].isPointer = true;\n            arr[p2].isPointer = true;\n            setNodes(arr);\n            setAnimating(true);\n            arr[p1].isPointer = false;\n            arr[p2].isPointer = false;  \n            }          \n        }, ms * count)               \n      }\n\n    const handleOptionChange = (e) => {\n        if(e.target.value === 'slow'){\n            setSpeed(e.target.value)\n            setMs(300)\n        }else if(e.target.value === 'medium'){\n            setSpeed(e.target.value)\n            setMs(100)\n        }else if(e.target.value === 'fast'){    \n            setSpeed(e.target.value)\n            setMs(50)\n        }\n            \n    }\n\n    return(\n        <div className='app'>\n            <form>\n                <h1>Animate Algorithms</h1>\n                <p>select playing speed, shuffle, and go...</p>\n                <input type=\"radio\" id=\"slow\" name=\"speed\" value=\"slow\" checked={speed === 'slow'} onChange={handleOptionChange} />\n                <label htmlFor=\"slow\">slow</label>\n                <input type=\"radio\" id=\"medium\" name=\"speed\" value=\"medium\" checked={speed === 'medium'} onChange={handleOptionChange}/>\n                <label htmlFor=\"medium\">medium</label>\n                <input type=\"radio\" id=\"fast\" name=\"speed\" value=\"fast\" checked={speed === 'fast'} onChange={handleOptionChange}/>\n                <label htmlFor=\"fast\">fast</label>\n            </form>\n\n            <table className='grid'>\n                {nodes.map((row) => {\n                    return (\n                        <thead key={row.key}>\n                            <tr className='no-margin'>\n                                {row.numb.map((node) => {\n                                    return <th className=\"border\" key={node.key}><Node node={node} pointer={row.isPointer} key={node.key}/> </th>\n                                })}\n                            </tr>                                \n                        </thead>\n                    );\n                })}                    \n            </table>\n            <button disabled={animating} className='shuffle-btn' onClick={shuffle}>SHUFFLE</button> <br />\n            <button disabled={inOrder || animating} className='button' onClick={animateInsertionsort}>Animate <br/> Insertion Sort</button>\n            <button  disabled={inOrder || animating} onClick={animateSelectionsort}>Animate <br/>  Selection Sort</button>    \n            <button disabled={inOrder || animating} onClick={animateBubblesort}>Animate <br/>  Bubble Sort</button>\n        </div>\n    );\n    \n}\n\nexport default Grid;","import Grid from './components/Grid';\nimport './App.css';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Grid />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}