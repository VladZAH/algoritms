{"version":3,"sources":["components/Node.js","components/Grid.js","App.js","reportWebVitals.js","index.js"],"names":["Node","props","startFinishClass","node","colored","pointer","_jsx","className","key","Grid","nodes","setNodes","useState","animating","setAnimating","inOrder","setInOrder","speed","setSpeed","ms","setMs","tout","useRef","useEffect","createNodes","row","curRow","col","curNode","concat","push","numb","isPointer","insertionSort","arr","count","timers","currentVal","curNum","i","length","filter","el","j","t1","time","slice","x","t2","t3","setTimeout","current","selectionSort","swap","idx1","idx2","lowest","t","y","bubbleSort","noSwaps","temp","t4","p1","p2","undefined","handleOptionChange","e","target","value","_jsxs","children","type","id","name","checked","onChange","htmlFor","map","onClick","shuffle","clearTimeout","sort","Math","random","disabled","animateInsertionsort","animateSelectionsort","animateBubblesort","App","reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2372caf9.chunk.js","sourcesContent":["import React from 'react';\nimport './styles/Node.css'\n\nconst Node = (props) => {\n    let startFinishClass = 'node';\n    if(props.node.colored && props.pointer){\n        startFinishClass = 'node pointer'\n    }else if(props.node.colored){\n        startFinishClass = 'node node-colored'\n    }\n\n    return(\n        <div className={startFinishClass} key={props.node.key}>\n            \n        </div>\n    );  \n}\n\nexport default Node;","import React, {useState, useEffect, useRef} from 'react';\nimport Node from './Node';\nimport './styles/Grid.css'\n\nconst Grid = () => {\n\n    const [nodes, setNodes] = useState([])\n    const [animating, setAnimating] = useState(false)\n    const [inOrder, setInOrder] = useState(true)\n    const [speed, setSpeed] = useState('fast')\n    const [ms, setMs] = useState(50)\n    const tout = useRef([])\n    \n\n    const createNodes = () => {\n        const nodes = [];\n        for(let row = 0; row < 25; row++){\n            const curRow = [];\n            for(let col = 0; col < 25; col++){\n                let curNode = {\n                    col, \n                    row,\n                    key: `id${row}${col}`,\n                    colored: col <= row ? true : false \n                };\n                curRow.push(curNode);\n            }\n        nodes.push({numb: curRow, \n                    key: `kr${row}`,\n                    isPointer: false\n                    })\n        }\n        return nodes\n    }\n\n    useEffect(() => {\n        setNodes(createNodes())\n    }, [])\n\n\n    const animateBubblesort = () => {\n        bubbleSort(nodes);\n    }\n    const animateSelectionsort = () => {\n        selectionSort(nodes);\n    }\n    const animateInsertionsort = () => {\n        insertionSort(nodes);\n    }\n\n    const shuffle = () => {\n        for (var i=0; i<tout.current.length; i++) {\n            clearTimeout(tout.current[i]);\n          }\n        tout.current=([])\n        setAnimating(false)\n        let arr = nodes.slice(0);\n        arr.sort(() => Math.random() - 0.5);\n        setNodes(arr);\n        setInOrder(false)\n    }\n\n    const insertionSort = (arr) => {\n        let count = 0\n        const timers = []\n        var currentVal, curNum\n        for(var i = 1; i < arr.length; i++){\n            currentVal = arr[i];\n            curNum = arr[i].numb.filter(el => el.colored).length;\n            for(var j = i - 1; j >= 0 && arr[j].numb.filter(el => el.colored).length > curNum; j--) {\n                let t1 = time(count,arr.slice(0), j+1, i)\n                timers.push(t1)\n                count++\n                let x = arr[j+1]\n                arr[j+1] = arr[j] \n                arr[j] = x\n            }  \n            arr[j+1] = currentVal;\n            curNum = j+1\n            let t2 = time(count,arr.slice(0), j+1, i)\n            timers.push(t2)\n            count++\n        }\n        let t3 = setTimeout(() => {\n            setAnimating(false)\n            setInOrder(true)\n        }, ms * count)\n        timers.push(t3)\n        tout.current=timers\n    }\n\n\n\n    const selectionSort = (arr) => {\n        const swap = (arr, idx1, idx2) =>\n          ([arr[idx1], arr[idx2]] = [arr[idx2], arr[idx1]]);\n        let count = 0;\n        const timers = []\n      \n        for (var i = 0; i < arr.length; i++) {\n          let lowest = i;\n          for (var j = i + 1; j < arr.length; j++) {    \n            let t = time(count,arr.slice(0),lowest, j)\n            timers.push(t)\n            count++\n            let x = arr[lowest].numb.filter(el => el.colored)\n            let y = arr[j].numb.filter(el => el.colored)\n            if (x.length > y.length) {\n              lowest = j;\n            }\n          }\n          if (i !== lowest) {\n              swap(arr, i, lowest);\n              let t1 = time(count,arr.slice(0),lowest, j)\n              timers.push(t1)\n              count++\n          }\n\n        }\n        let t3 = setTimeout(() => {\n                setAnimating(false)\n                setInOrder(true)\n                setNodes(arr)\n            }, ms * count)\n        timers.push(t3)\n        tout.current=timers\n    }\n\n    const bubbleSort = (arr) => {\n        var noSwaps;\n        var count = 0;\n        const timers = []\n        for(var i = arr.length; i > 0; i--){\n            noSwaps = true;\n                for(var j = 0; j < i - 1; j++){\n                    let x = arr[j].numb.filter(el => el.colored)\n                    let y = arr[j + 1].numb.filter(el => el.colored)\n                    if(x.length > y.length){\n                        var temp = arr[j];\n                        arr[j] = arr[j+1];\n                        arr[j+1] = temp;\n                        noSwaps = false;\n                        let t1 = time(count,arr.slice(0),j,j+1)\n                        timers.push(t1)\n                        count++  \n                    }else{\n                        let t2 = time(count,arr.slice(0),j,j+1)\n                        timers.push(t2)\n                        count++ \n                    }\n                }\n            if(noSwaps){\n                let t3 = time(count,arr.slice(0),j,j+1)\n                timers.push(t3)\n                break\n            };\n        }\n        let t4 = setTimeout(() => {\n            setAnimating(false)\n            setInOrder(true)\n        }, ms * count)\n        timers.push(t4)\n        tout.current = timers\n    }\n    const time = (count, arr,p1,p2) => {\n        \n        let t = setTimeout(() => {\n                if(arr[p1] !== undefined && arr[p2] !== undefined){\n                arr[p1].isPointer = true;\n                arr[p2].isPointer = true;\n                setNodes(arr);\n                setAnimating(true);\n                arr[p1].isPointer = false;\n                arr[p2].isPointer = false;  \n                }          \n            }, ms * count)\n        return t           \n    }\n\n    const handleOptionChange = (e) => {\n        if(e.target.value === 'slow'){\n            setSpeed(e.target.value)\n            setMs(300)\n        }else if(e.target.value === 'medium'){\n            setSpeed(e.target.value)\n            setMs(100)\n        }else if(e.target.value === 'fast'){    \n            setSpeed(e.target.value)\n            setMs(50)\n        }\n            \n    }\n\n    return(\n        <div className='app'>\n            <form>\n                <h1>Animate Algorithms</h1>\n                <p>select playing speed, shuffle, and go...</p>\n                <input type=\"radio\" id=\"slow\" name=\"speed\" value=\"slow\" checked={speed === 'slow'} onChange={handleOptionChange} />\n                <label htmlFor=\"slow\">slow</label>\n                <input type=\"radio\" id=\"medium\" name=\"speed\" value=\"medium\" checked={speed === 'medium'} onChange={handleOptionChange}/>\n                <label htmlFor=\"medium\">medium</label>\n                <input type=\"radio\" id=\"fast\" name=\"speed\" value=\"fast\" checked={speed === 'fast'} onChange={handleOptionChange}/>\n                <label htmlFor=\"fast\">fast</label>\n            </form>\n\n            <table className='grid'>\n                {nodes.map((row) => {\n                    return (\n                        <thead key={row.key}>\n                            <tr className='no-margin'>\n                                {row.numb.map((node) => {\n                                    return <th className=\"border\" key={node.key}><Node node={node} pointer={row.isPointer} key={node.key}/> </th>\n                                })}\n                            </tr>                                \n                        </thead>\n                    );\n                })}                    \n            </table>\n            <button className='shuffle-btn' onClick={shuffle}>SHUFFLE</button> <br />\n            <button disabled={inOrder || animating} className='button' onClick={animateInsertionsort}>Animate <br/> Insertion Sort</button>\n            <button  disabled={inOrder || animating} onClick={animateSelectionsort}>Animate <br/>  Selection Sort</button>    \n            <button disabled={inOrder || animating} onClick={animateBubblesort}>Animate <br/>  Bubble Sort</button>\n        </div>\n    );\n    \n}\n\nexport default Grid;","import Grid from './components/Grid';\nimport './App.css';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Grid />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}